searchState.loadedDescShard("poli_math", 0, "WebGPU-friendly 3D graphics math library.\nRGB color in the working color space. All channel values …\nEuler angles.\nOrder of Euler rotations.\n3x3 matrix. Note that elements are stored in column-major …\n4x4 matrix, commonly used to encode transformations i.e. …\nQuaternion, which can be used to represent rotations.\n3D vector for quantities such as 3D points, 3D directions, …\nReturns the adjugate of this matrix.\nReturns the adjugate of this matrix.\nBlue channel value between <code>0.0</code> and <code>1.0</code>.\nCreates a matrix for the transformation composed of the …\nReturns the conjugate. The conjugate represents the same …\nCopies another quaternion.\nCopies the elements from another matrix into this matrix.\nCopies the elements from another matrix into this matrix.\nCopies the elements from the given vector into this vector.\nReturns the cross product of this vector with another …\nReturns the default color, which is black.\nReturns the default order of Euler angles, which is XYZ.\nReturns the identity quaternion (i.e. no rotation).\nReturns the default 4x4 matrix, which is the 4x4 identity …\nReturns the determinant of this matrix.\nReturns the determinant of this matrix. Note that this …\nThe elements in column-major order.\nThe elements of this matrix in column-major order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the given Euler angles to a rotation quaternion.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new quaternion for the rotation by the given …\nReturns the rotation matrix from the given Euler angles.\nCreates Euler angles from the given rotation quaternion …\nReturns the rotation matrix from the given rotation …\nCreates Euler angles from the given rotation matrix and …\nReturns the rotation matrix around the X axis by the given …\nReturns the rotation matrix around the Y axis by the given …\nReturns the rotation matrix around the Z axis by the given …\nReturns the transformation matrix for the given scale …\nReturns the translation matrix of the given displacement …\nGreen channel value between <code>0.0</code> and <code>1.0</code>.\nReturns the 3x3 identity matrix.\nReturns the 4x4 identity matrix.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inverse of this matrix. If this matrix has no …\nReturns the inverse of this matrix. If this matrix has no …\nInverts this quaternion. If this is a rotation quaternion, …\nReturns the length of this vector.\nReturns a rotation matrix looking from <code>eye</code> towards <code>target</code> …\nMultiplies this quaternion by the given quaternion.\nReturns the result of multiplying two given quaternions.\nCreates a new color with the given normalized values.\nCreates a new 3x3 matrix with the given row-major …\nCreates a new 4x4 matrix with the given row-major …\nReturns the norm. The norm of a quaternion has no inherent …\nReturns the normal matrix for the given transformation …\nNormalizes this quaternion.\nNormalizes this vector.\nOrder that the rotations are applied.\nPre-multiplies this quaternion by the given quaternion.\nPre-multiplies this matrix with the given matrix.\nRed channel value between <code>0.0</code> and <code>1.0</code>.\nApplies the given rotation quaternion.\nScales by the given scale factor.\nSets the RGB components of this color.\nSets the X, Y, and Z angles, and optionally the order.\nSets the <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code> properties.\nSets the elements of this matrix with the given row-major …\nSets the elements of this matrix with the given row-major …\nTranslates by the given vector.\nReturns the translation component of this matrix.\nReturns the transpose of this matrix.\nAngle of the X axis in radians.\nThe x component.\nAngle of the Y axis in radians.\nThe y component.\nAngle of the Z axis in radians.\nThe z component.\nReturns the 3x3 zero matrix.\nReturns the 4x4 zero matrix.\nReturns the 3D zero vector.")